version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: erp_database
    environment:
      POSTGRES_DB: erp_webapp
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5433:5432"
    networks:
      - erp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_webapp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp_backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://erp_user:erp_password@database:5432/erp_webapp
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - erp_network
    volumes:
      - ./backend:/app
      # - reports_data:/tmp/reports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 5
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp_frontend
    environment:
      - VITE_API_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
      # - "80:80"
    depends_on:
      - backend
      # backend:
        # condition: service_healthy
    networks:
      - erp_network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/"]
    #   interval: 30s
    #   timeout: 10s
    #   start_period: 20s
    #   retries: 5
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: erp_redis
    ports:
      - "6380:6379"
    networks:
      - erp_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  reports_data:
    driver: local

networks:
  erp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16



